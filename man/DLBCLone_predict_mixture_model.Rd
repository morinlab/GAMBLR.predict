% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/umap.R
\name{DLBCLone_predict_mixture_model}
\alias{DLBCLone_predict_mixture_model}
\title{Predict DLBCLone Class Membership Using a Trained Gaussian Mixture Model}
\usage{
DLBCLone_predict_mixture_model(
  model,
  umap_out,
  probability_threshold = 0.5,
  density_max_threshold = 0.05,
  cohort = NULL
)
}
\arguments{
\item{model}{Fitted \code{MclustDA} model object, as returned by \code{DLBCLone_train_mixture_model}.}

\item{umap_out}{List. Output from \code{make_and_annotate_umap}, containing a data frame with UMAP
coordinates for the samples to be classified with the model. This must be projected using the same UMAP model
that was generated using the training data.}

\item{probability_threshold}{Numeric. Minimum posterior probability required to assign a class (default: 0.5).}

\item{density_max_threshold}{Numeric. Minimum maximum density required to assign a class (default: 0.05).}

\item{cohort}{Optional character. Cohort label to annotate predictions.}
}
\value{
A list with:
\item{gaussian_mixture_model}{Fitted \code{MclustDA} model object}
\item{predictions}{Data frame with sample IDs, UMAP coordinates, predicted classes, and thresholded assignments}
\item{probability_threshold}{Probability threshold used for "Other" assignment}
}
\description{
Applies a previously trained supervised Gaussian mixture model (GMM) to UMAP-projected data for DLBCLone subtypes.
Assigns class predictions and optionally reclassifies samples as "Other" based on probability and density thresholds.
}
\details{
\itemize{
\item Uses the provided \code{MclustDA} model to predict class membership for each sample in the UMAP projection.
\item Computes per-class densities and posterior probabilities for each sample.
\item Samples with low maximum probability or density are reclassified as "Other".
\item Returns both raw and thresholded class assignments, respectively under the columns DLBCLone_g and DLBCLone_go.
}
}
\examples{
# Predict on new UMAP data using a trained mixture model:

library(GAMBLR.predict)

result <- DLBCLone_predict_mixture_model(model, umap_out)
head(result$predictions)


}
