% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\name{make_neighborhood_plot}
\alias{make_neighborhood_plot}
\title{Make Neighborhood Plot}
\usage{
make_neighborhood_plot(
  single_sample_prediction_output,
  training_predictions,
  this_sample_id,
  prediction_in_title = TRUE,
  add_circle = TRUE,
  label_column = "DLBCLone_io",
  point_size = 0.5,
  point_alpha = 0.9,
  line_alpha = 0.9
)
}
\arguments{
\item{single_sample_prediction_output}{A list containing prediction results and annotation data frames.
Must include elements \code{prediction} (data frame with prediction results) and \code{anno_df} (data frame with UMAP coordinates and annotations).}

\item{training_predictions}{The equivalent data frame of prediction results for all training samples (e.g. optimized_model$df)}

\item{this_sample_id}{Character. The sample ID for which the neighborhood plot will be generated.}

\item{prediction_in_title}{Logical. If \code{TRUE}, includes the predicted label in the plot title.}

\item{add_circle}{Plot will include a circle surrounding the set of neighbors. Set to FALSE to disable.}

\item{label_column}{Does nothing, i.e. this is not currently working.}
}
\value{
A \code{ggplot2} object representing the UMAP plot with the selected sample and its neighbors highlighted.
}
\description{
Generates a UMAP plot highlighting the neighborhood of a given sample, showing its nearest neighbors and their group assignments.
}
\details{
The function extracts the nearest neighbors of the specified sample, draws segments connecting the sample to its neighbors, and colors points by group (e.g., lymphgen subtype). The plot title can optionally include the predicted label.
}
\examples{

# Assuming 'optimization_result' is the output of DLBCLone_optimize_params
# and 'output' is the result of DLBCLone_predict_single_sample
# on sample_id "SAMPLE123":
\dontrun{
library(GAMBLR.predict)

predict_single <- predict_single_sample_DLBCLone(
  test_df = optimize_params$features[1,],
  train_metadata = dlbcl_meta, 
  optimized_model = optimize_params
)

make_neighborhood_plot(
  single_sample_prediction_output = predict_single,
  training_predictions = optimize_params$df,
  this_sample_id = "SAMPLE123",
  prediction_in_title = TRUE,
  add_circle = TRUE
)
}

}
